// Mocks generated by Mockito 5.4.4 from annotations
// in jai_swaminarayan/test/helpers/daily_news_mock_generate_test_helper.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i4;

import 'package:dio/dio.dart' as _i8;
import 'package:flutter_bloc/flutter_bloc.dart' as _i21;
import 'package:jai_swaminarayan/core/resources/data_state.dart' as _i6;
import 'package:jai_swaminarayan/features/daily_news/data/data_sources/local/app_database.dart'
    as _i12;
import 'package:jai_swaminarayan/features/daily_news/data/data_sources/local/DAO/article_dao.dart'
    as _i3;
import 'package:jai_swaminarayan/features/daily_news/data/data_sources/remote/remote_news_api_service.dart'
    as _i10;
import 'package:jai_swaminarayan/features/daily_news/data/models/article_model.dart'
    as _i11;
import 'package:jai_swaminarayan/features/daily_news/domain/entities/article_entity.dart'
    as _i14;
import 'package:jai_swaminarayan/features/daily_news/domain/repository/article_repository.dart'
    as _i13;
import 'package:jai_swaminarayan/features/daily_news/domain/usecases/article/delete_article_use_case.dart'
    as _i15;
import 'package:jai_swaminarayan/features/daily_news/domain/usecases/article/get_article_use_case.dart'
    as _i17;
import 'package:jai_swaminarayan/features/daily_news/domain/usecases/article/get_saved_articles_use_case.dart'
    as _i18;
import 'package:jai_swaminarayan/features/daily_news/domain/usecases/article/save_article_use_case.dart'
    as _i16;
import 'package:jai_swaminarayan/features/daily_news/presentation/bloc/article/local/local_article_bloc.dart'
    as _i19;
import 'package:jai_swaminarayan/features/daily_news/presentation/bloc/article/local/local_article_event.dart'
    as _i20;
import 'package:jai_swaminarayan/features/daily_news/presentation/bloc/article/local/local_article_state.dart'
    as _i7;
import 'package:jai_swaminarayan/features/daily_news/presentation/bloc/article/remote/remote_article_bloc.dart'
    as _i22;
import 'package:jai_swaminarayan/features/daily_news/presentation/bloc/article/remote/remote_article_event.dart'
    as _i23;
import 'package:jai_swaminarayan/features/daily_news/presentation/bloc/article/remote/remote_article_state.dart'
    as _i9;
import 'package:mockito/mockito.dart' as _i1;
import 'package:retrofit/retrofit.dart' as _i2;
import 'package:sqflite/sqflite.dart' as _i5;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeHttpResponse_0<T> extends _i1.SmartFake
    implements _i2.HttpResponse<T> {
  _FakeHttpResponse_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeArticleDao_1 extends _i1.SmartFake implements _i3.ArticleDao {
  _FakeArticleDao_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeStreamController_2<T> extends _i1.SmartFake
    implements _i4.StreamController<T> {
  _FakeStreamController_2(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeDatabaseExecutor_3 extends _i1.SmartFake
    implements _i5.DatabaseExecutor {
  _FakeDatabaseExecutor_3(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeDataState_4<T> extends _i1.SmartFake implements _i6.DataState<T> {
  _FakeDataState_4(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeLocalArticleState_5 extends _i1.SmartFake
    implements _i7.LocalArticleState {
  _FakeLocalArticleState_5(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeBaseOptions_6 extends _i1.SmartFake implements _i8.BaseOptions {
  _FakeBaseOptions_6(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeHttpClientAdapter_7 extends _i1.SmartFake
    implements _i8.HttpClientAdapter {
  _FakeHttpClientAdapter_7(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeTransformer_8 extends _i1.SmartFake implements _i8.Transformer {
  _FakeTransformer_8(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeInterceptors_9 extends _i1.SmartFake implements _i8.Interceptors {
  _FakeInterceptors_9(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeResponse_10<T1> extends _i1.SmartFake implements _i8.Response<T1> {
  _FakeResponse_10(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeRemoteArticlesState_11 extends _i1.SmartFake
    implements _i9.RemoteArticlesState {
  _FakeRemoteArticlesState_11(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [RemoteNewsApiService].
///
/// See the documentation for Mockito's code generation for more information.
class MockRemoteNewsApiService extends _i1.Mock
    implements _i10.RemoteNewsApiService {
  MockRemoteNewsApiService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<_i2.HttpResponse<List<_i11.ArticleModel>>> getNewsArticles() =>
      (super.noSuchMethod(
        Invocation.method(
          #getNewsArticles,
          [],
        ),
        returnValue:
            _i4.Future<_i2.HttpResponse<List<_i11.ArticleModel>>>.value(
                _FakeHttpResponse_0<List<_i11.ArticleModel>>(
          this,
          Invocation.method(
            #getNewsArticles,
            [],
          ),
        )),
      ) as _i4.Future<_i2.HttpResponse<List<_i11.ArticleModel>>>);
}

/// A class which mocks [AppDatabase].
///
/// See the documentation for Mockito's code generation for more information.
class MockAppDatabase extends _i1.Mock implements _i12.AppDatabase {
  MockAppDatabase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i3.ArticleDao get ArticleDAO => (super.noSuchMethod(
        Invocation.getter(#ArticleDAO),
        returnValue: _FakeArticleDao_1(
          this,
          Invocation.getter(#ArticleDAO),
        ),
      ) as _i3.ArticleDao);

  @override
  _i4.StreamController<String> get changeListener => (super.noSuchMethod(
        Invocation.getter(#changeListener),
        returnValue: _FakeStreamController_2<String>(
          this,
          Invocation.getter(#changeListener),
        ),
      ) as _i4.StreamController<String>);

  @override
  set changeListener(_i4.StreamController<String>? _changeListener) =>
      super.noSuchMethod(
        Invocation.setter(
          #changeListener,
          _changeListener,
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i5.DatabaseExecutor get database => (super.noSuchMethod(
        Invocation.getter(#database),
        returnValue: _FakeDatabaseExecutor_3(
          this,
          Invocation.getter(#database),
        ),
      ) as _i5.DatabaseExecutor);

  @override
  set database(_i5.DatabaseExecutor? _database) => super.noSuchMethod(
        Invocation.setter(
          #database,
          _database,
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i4.Future<void> close() => (super.noSuchMethod(
        Invocation.method(
          #close,
          [],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);
}

/// A class which mocks [ArticleRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockArticleRepository extends _i1.Mock implements _i13.ArticleRepository {
  MockArticleRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<_i6.DataState<List<_i14.ArticleEntity>>> getNewsArticles() =>
      (super.noSuchMethod(
        Invocation.method(
          #getNewsArticles,
          [],
        ),
        returnValue: _i4.Future<_i6.DataState<List<_i14.ArticleEntity>>>.value(
            _FakeDataState_4<List<_i14.ArticleEntity>>(
          this,
          Invocation.method(
            #getNewsArticles,
            [],
          ),
        )),
      ) as _i4.Future<_i6.DataState<List<_i14.ArticleEntity>>>);

  @override
  _i4.Future<List<_i14.ArticleEntity>> getSavedArticles() =>
      (super.noSuchMethod(
        Invocation.method(
          #getSavedArticles,
          [],
        ),
        returnValue:
            _i4.Future<List<_i14.ArticleEntity>>.value(<_i14.ArticleEntity>[]),
      ) as _i4.Future<List<_i14.ArticleEntity>>);

  @override
  _i4.Future<void> saveArticle(_i14.ArticleEntity? article) =>
      (super.noSuchMethod(
        Invocation.method(
          #saveArticle,
          [article],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<void> deleteArticle(_i14.ArticleEntity? article) =>
      (super.noSuchMethod(
        Invocation.method(
          #deleteArticle,
          [article],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);
}

/// A class which mocks [DeleteArticleUseCase].
///
/// See the documentation for Mockito's code generation for more information.
class MockDeleteArticleUseCase extends _i1.Mock
    implements _i15.DeleteArticleUseCase {
  MockDeleteArticleUseCase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<void> call({_i14.ArticleEntity? params}) => (super.noSuchMethod(
        Invocation.method(
          #call,
          [],
          {#params: params},
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);
}

/// A class which mocks [SaveArticleUseCase].
///
/// See the documentation for Mockito's code generation for more information.
class MockSaveArticleUseCase extends _i1.Mock
    implements _i16.SaveArticleUseCase {
  MockSaveArticleUseCase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<void> call({_i14.ArticleEntity? params}) => (super.noSuchMethod(
        Invocation.method(
          #call,
          [],
          {#params: params},
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);
}

/// A class which mocks [GetArticleUseCase].
///
/// See the documentation for Mockito's code generation for more information.
class MockGetArticleUseCase extends _i1.Mock implements _i17.GetArticleUseCase {
  MockGetArticleUseCase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<_i6.DataState<List<_i14.ArticleEntity>>> call({dynamic params}) =>
      (super.noSuchMethod(
        Invocation.method(
          #call,
          [],
          {#params: params},
        ),
        returnValue: _i4.Future<_i6.DataState<List<_i14.ArticleEntity>>>.value(
            _FakeDataState_4<List<_i14.ArticleEntity>>(
          this,
          Invocation.method(
            #call,
            [],
            {#params: params},
          ),
        )),
      ) as _i4.Future<_i6.DataState<List<_i14.ArticleEntity>>>);
}

/// A class which mocks [GetSavedArticleUseCase].
///
/// See the documentation for Mockito's code generation for more information.
class MockGetSavedArticleUseCase extends _i1.Mock
    implements _i18.GetSavedArticleUseCase {
  MockGetSavedArticleUseCase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<List<_i14.ArticleEntity>> call({dynamic params}) =>
      (super.noSuchMethod(
        Invocation.method(
          #call,
          [],
          {#params: params},
        ),
        returnValue:
            _i4.Future<List<_i14.ArticleEntity>>.value(<_i14.ArticleEntity>[]),
      ) as _i4.Future<List<_i14.ArticleEntity>>);
}

/// A class which mocks [LocalArticleBloc].
///
/// See the documentation for Mockito's code generation for more information.
class MockLocalArticleBloc extends _i1.Mock implements _i19.LocalArticleBloc {
  MockLocalArticleBloc() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i7.LocalArticleState get state => (super.noSuchMethod(
        Invocation.getter(#state),
        returnValue: _FakeLocalArticleState_5(
          this,
          Invocation.getter(#state),
        ),
      ) as _i7.LocalArticleState);

  @override
  _i4.Stream<_i7.LocalArticleState> get stream => (super.noSuchMethod(
        Invocation.getter(#stream),
        returnValue: _i4.Stream<_i7.LocalArticleState>.empty(),
      ) as _i4.Stream<_i7.LocalArticleState>);

  @override
  bool get isClosed => (super.noSuchMethod(
        Invocation.getter(#isClosed),
        returnValue: false,
      ) as bool);

  @override
  void onGetSavedArticlesEvent(
    _i20.GetSavedArticlesEvent? event,
    _i21.Emitter<_i7.LocalArticleState>? emit,
  ) =>
      super.noSuchMethod(
        Invocation.method(
          #onGetSavedArticlesEvent,
          [
            event,
            emit,
          ],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void onSaveArticleEvent(
    _i20.SaveArticleEvent? saveArticle,
    _i21.Emitter<_i7.LocalArticleState>? emit,
  ) =>
      super.noSuchMethod(
        Invocation.method(
          #onSaveArticleEvent,
          [
            saveArticle,
            emit,
          ],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void onDeleteArticleEvent(
    _i20.DeleteArticleEvent? deleteArticle,
    _i21.Emitter<_i7.LocalArticleState>? emit,
  ) =>
      super.noSuchMethod(
        Invocation.method(
          #onDeleteArticleEvent,
          [
            deleteArticle,
            emit,
          ],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void add(_i20.LocalArticleEvent? event) => super.noSuchMethod(
        Invocation.method(
          #add,
          [event],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void onEvent(_i20.LocalArticleEvent? event) => super.noSuchMethod(
        Invocation.method(
          #onEvent,
          [event],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void emit(_i7.LocalArticleState? state) => super.noSuchMethod(
        Invocation.method(
          #emit,
          [state],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void on<E extends _i20.LocalArticleEvent>(
    _i21.EventHandler<E, _i7.LocalArticleState>? handler, {
    _i21.EventTransformer<E>? transformer,
  }) =>
      super.noSuchMethod(
        Invocation.method(
          #on,
          [handler],
          {#transformer: transformer},
        ),
        returnValueForMissingStub: null,
      );

  @override
  void onTransition(
          _i21.Transition<_i20.LocalArticleEvent, _i7.LocalArticleState>?
              transition) =>
      super.noSuchMethod(
        Invocation.method(
          #onTransition,
          [transition],
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i4.Future<void> close() => (super.noSuchMethod(
        Invocation.method(
          #close,
          [],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  void onChange(_i21.Change<_i7.LocalArticleState>? change) =>
      super.noSuchMethod(
        Invocation.method(
          #onChange,
          [change],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void addError(
    Object? error, [
    StackTrace? stackTrace,
  ]) =>
      super.noSuchMethod(
        Invocation.method(
          #addError,
          [
            error,
            stackTrace,
          ],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void onError(
    Object? error,
    StackTrace? stackTrace,
  ) =>
      super.noSuchMethod(
        Invocation.method(
          #onError,
          [
            error,
            stackTrace,
          ],
        ),
        returnValueForMissingStub: null,
      );
}

/// A class which mocks [Dio].
///
/// See the documentation for Mockito's code generation for more information.
class MockDio extends _i1.Mock implements _i8.Dio {
  @override
  _i8.BaseOptions get options => (super.noSuchMethod(
        Invocation.getter(#options),
        returnValue: _FakeBaseOptions_6(
          this,
          Invocation.getter(#options),
        ),
        returnValueForMissingStub: _FakeBaseOptions_6(
          this,
          Invocation.getter(#options),
        ),
      ) as _i8.BaseOptions);

  @override
  set options(_i8.BaseOptions? _options) => super.noSuchMethod(
        Invocation.setter(
          #options,
          _options,
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i8.HttpClientAdapter get httpClientAdapter => (super.noSuchMethod(
        Invocation.getter(#httpClientAdapter),
        returnValue: _FakeHttpClientAdapter_7(
          this,
          Invocation.getter(#httpClientAdapter),
        ),
        returnValueForMissingStub: _FakeHttpClientAdapter_7(
          this,
          Invocation.getter(#httpClientAdapter),
        ),
      ) as _i8.HttpClientAdapter);

  @override
  set httpClientAdapter(_i8.HttpClientAdapter? _httpClientAdapter) =>
      super.noSuchMethod(
        Invocation.setter(
          #httpClientAdapter,
          _httpClientAdapter,
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i8.Transformer get transformer => (super.noSuchMethod(
        Invocation.getter(#transformer),
        returnValue: _FakeTransformer_8(
          this,
          Invocation.getter(#transformer),
        ),
        returnValueForMissingStub: _FakeTransformer_8(
          this,
          Invocation.getter(#transformer),
        ),
      ) as _i8.Transformer);

  @override
  set transformer(_i8.Transformer? _transformer) => super.noSuchMethod(
        Invocation.setter(
          #transformer,
          _transformer,
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i8.Interceptors get interceptors => (super.noSuchMethod(
        Invocation.getter(#interceptors),
        returnValue: _FakeInterceptors_9(
          this,
          Invocation.getter(#interceptors),
        ),
        returnValueForMissingStub: _FakeInterceptors_9(
          this,
          Invocation.getter(#interceptors),
        ),
      ) as _i8.Interceptors);

  @override
  void close({bool? force = false}) => super.noSuchMethod(
        Invocation.method(
          #close,
          [],
          {#force: force},
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i4.Future<_i8.Response<T>> head<T>(
    String? path, {
    Object? data,
    Map<String, dynamic>? queryParameters,
    _i8.Options? options,
    _i8.CancelToken? cancelToken,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #head,
          [path],
          {
            #data: data,
            #queryParameters: queryParameters,
            #options: options,
            #cancelToken: cancelToken,
          },
        ),
        returnValue: _i4.Future<_i8.Response<T>>.value(_FakeResponse_10<T>(
          this,
          Invocation.method(
            #head,
            [path],
            {
              #data: data,
              #queryParameters: queryParameters,
              #options: options,
              #cancelToken: cancelToken,
            },
          ),
        )),
        returnValueForMissingStub:
            _i4.Future<_i8.Response<T>>.value(_FakeResponse_10<T>(
          this,
          Invocation.method(
            #head,
            [path],
            {
              #data: data,
              #queryParameters: queryParameters,
              #options: options,
              #cancelToken: cancelToken,
            },
          ),
        )),
      ) as _i4.Future<_i8.Response<T>>);

  @override
  _i4.Future<_i8.Response<T>> headUri<T>(
    Uri? uri, {
    Object? data,
    _i8.Options? options,
    _i8.CancelToken? cancelToken,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #headUri,
          [uri],
          {
            #data: data,
            #options: options,
            #cancelToken: cancelToken,
          },
        ),
        returnValue: _i4.Future<_i8.Response<T>>.value(_FakeResponse_10<T>(
          this,
          Invocation.method(
            #headUri,
            [uri],
            {
              #data: data,
              #options: options,
              #cancelToken: cancelToken,
            },
          ),
        )),
        returnValueForMissingStub:
            _i4.Future<_i8.Response<T>>.value(_FakeResponse_10<T>(
          this,
          Invocation.method(
            #headUri,
            [uri],
            {
              #data: data,
              #options: options,
              #cancelToken: cancelToken,
            },
          ),
        )),
      ) as _i4.Future<_i8.Response<T>>);

  @override
  _i4.Future<_i8.Response<T>> get<T>(
    String? path, {
    Object? data,
    Map<String, dynamic>? queryParameters,
    _i8.Options? options,
    _i8.CancelToken? cancelToken,
    _i8.ProgressCallback? onReceiveProgress,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #get,
          [path],
          {
            #data: data,
            #queryParameters: queryParameters,
            #options: options,
            #cancelToken: cancelToken,
            #onReceiveProgress: onReceiveProgress,
          },
        ),
        returnValue: _i4.Future<_i8.Response<T>>.value(_FakeResponse_10<T>(
          this,
          Invocation.method(
            #get,
            [path],
            {
              #data: data,
              #queryParameters: queryParameters,
              #options: options,
              #cancelToken: cancelToken,
              #onReceiveProgress: onReceiveProgress,
            },
          ),
        )),
        returnValueForMissingStub:
            _i4.Future<_i8.Response<T>>.value(_FakeResponse_10<T>(
          this,
          Invocation.method(
            #get,
            [path],
            {
              #data: data,
              #queryParameters: queryParameters,
              #options: options,
              #cancelToken: cancelToken,
              #onReceiveProgress: onReceiveProgress,
            },
          ),
        )),
      ) as _i4.Future<_i8.Response<T>>);

  @override
  _i4.Future<_i8.Response<T>> getUri<T>(
    Uri? uri, {
    Object? data,
    _i8.Options? options,
    _i8.CancelToken? cancelToken,
    _i8.ProgressCallback? onReceiveProgress,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #getUri,
          [uri],
          {
            #data: data,
            #options: options,
            #cancelToken: cancelToken,
            #onReceiveProgress: onReceiveProgress,
          },
        ),
        returnValue: _i4.Future<_i8.Response<T>>.value(_FakeResponse_10<T>(
          this,
          Invocation.method(
            #getUri,
            [uri],
            {
              #data: data,
              #options: options,
              #cancelToken: cancelToken,
              #onReceiveProgress: onReceiveProgress,
            },
          ),
        )),
        returnValueForMissingStub:
            _i4.Future<_i8.Response<T>>.value(_FakeResponse_10<T>(
          this,
          Invocation.method(
            #getUri,
            [uri],
            {
              #data: data,
              #options: options,
              #cancelToken: cancelToken,
              #onReceiveProgress: onReceiveProgress,
            },
          ),
        )),
      ) as _i4.Future<_i8.Response<T>>);

  @override
  _i4.Future<_i8.Response<T>> post<T>(
    String? path, {
    Object? data,
    Map<String, dynamic>? queryParameters,
    _i8.Options? options,
    _i8.CancelToken? cancelToken,
    _i8.ProgressCallback? onSendProgress,
    _i8.ProgressCallback? onReceiveProgress,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #post,
          [path],
          {
            #data: data,
            #queryParameters: queryParameters,
            #options: options,
            #cancelToken: cancelToken,
            #onSendProgress: onSendProgress,
            #onReceiveProgress: onReceiveProgress,
          },
        ),
        returnValue: _i4.Future<_i8.Response<T>>.value(_FakeResponse_10<T>(
          this,
          Invocation.method(
            #post,
            [path],
            {
              #data: data,
              #queryParameters: queryParameters,
              #options: options,
              #cancelToken: cancelToken,
              #onSendProgress: onSendProgress,
              #onReceiveProgress: onReceiveProgress,
            },
          ),
        )),
        returnValueForMissingStub:
            _i4.Future<_i8.Response<T>>.value(_FakeResponse_10<T>(
          this,
          Invocation.method(
            #post,
            [path],
            {
              #data: data,
              #queryParameters: queryParameters,
              #options: options,
              #cancelToken: cancelToken,
              #onSendProgress: onSendProgress,
              #onReceiveProgress: onReceiveProgress,
            },
          ),
        )),
      ) as _i4.Future<_i8.Response<T>>);

  @override
  _i4.Future<_i8.Response<T>> postUri<T>(
    Uri? uri, {
    Object? data,
    _i8.Options? options,
    _i8.CancelToken? cancelToken,
    _i8.ProgressCallback? onSendProgress,
    _i8.ProgressCallback? onReceiveProgress,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #postUri,
          [uri],
          {
            #data: data,
            #options: options,
            #cancelToken: cancelToken,
            #onSendProgress: onSendProgress,
            #onReceiveProgress: onReceiveProgress,
          },
        ),
        returnValue: _i4.Future<_i8.Response<T>>.value(_FakeResponse_10<T>(
          this,
          Invocation.method(
            #postUri,
            [uri],
            {
              #data: data,
              #options: options,
              #cancelToken: cancelToken,
              #onSendProgress: onSendProgress,
              #onReceiveProgress: onReceiveProgress,
            },
          ),
        )),
        returnValueForMissingStub:
            _i4.Future<_i8.Response<T>>.value(_FakeResponse_10<T>(
          this,
          Invocation.method(
            #postUri,
            [uri],
            {
              #data: data,
              #options: options,
              #cancelToken: cancelToken,
              #onSendProgress: onSendProgress,
              #onReceiveProgress: onReceiveProgress,
            },
          ),
        )),
      ) as _i4.Future<_i8.Response<T>>);

  @override
  _i4.Future<_i8.Response<T>> put<T>(
    String? path, {
    Object? data,
    Map<String, dynamic>? queryParameters,
    _i8.Options? options,
    _i8.CancelToken? cancelToken,
    _i8.ProgressCallback? onSendProgress,
    _i8.ProgressCallback? onReceiveProgress,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #put,
          [path],
          {
            #data: data,
            #queryParameters: queryParameters,
            #options: options,
            #cancelToken: cancelToken,
            #onSendProgress: onSendProgress,
            #onReceiveProgress: onReceiveProgress,
          },
        ),
        returnValue: _i4.Future<_i8.Response<T>>.value(_FakeResponse_10<T>(
          this,
          Invocation.method(
            #put,
            [path],
            {
              #data: data,
              #queryParameters: queryParameters,
              #options: options,
              #cancelToken: cancelToken,
              #onSendProgress: onSendProgress,
              #onReceiveProgress: onReceiveProgress,
            },
          ),
        )),
        returnValueForMissingStub:
            _i4.Future<_i8.Response<T>>.value(_FakeResponse_10<T>(
          this,
          Invocation.method(
            #put,
            [path],
            {
              #data: data,
              #queryParameters: queryParameters,
              #options: options,
              #cancelToken: cancelToken,
              #onSendProgress: onSendProgress,
              #onReceiveProgress: onReceiveProgress,
            },
          ),
        )),
      ) as _i4.Future<_i8.Response<T>>);

  @override
  _i4.Future<_i8.Response<T>> putUri<T>(
    Uri? uri, {
    Object? data,
    _i8.Options? options,
    _i8.CancelToken? cancelToken,
    _i8.ProgressCallback? onSendProgress,
    _i8.ProgressCallback? onReceiveProgress,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #putUri,
          [uri],
          {
            #data: data,
            #options: options,
            #cancelToken: cancelToken,
            #onSendProgress: onSendProgress,
            #onReceiveProgress: onReceiveProgress,
          },
        ),
        returnValue: _i4.Future<_i8.Response<T>>.value(_FakeResponse_10<T>(
          this,
          Invocation.method(
            #putUri,
            [uri],
            {
              #data: data,
              #options: options,
              #cancelToken: cancelToken,
              #onSendProgress: onSendProgress,
              #onReceiveProgress: onReceiveProgress,
            },
          ),
        )),
        returnValueForMissingStub:
            _i4.Future<_i8.Response<T>>.value(_FakeResponse_10<T>(
          this,
          Invocation.method(
            #putUri,
            [uri],
            {
              #data: data,
              #options: options,
              #cancelToken: cancelToken,
              #onSendProgress: onSendProgress,
              #onReceiveProgress: onReceiveProgress,
            },
          ),
        )),
      ) as _i4.Future<_i8.Response<T>>);

  @override
  _i4.Future<_i8.Response<T>> patch<T>(
    String? path, {
    Object? data,
    Map<String, dynamic>? queryParameters,
    _i8.Options? options,
    _i8.CancelToken? cancelToken,
    _i8.ProgressCallback? onSendProgress,
    _i8.ProgressCallback? onReceiveProgress,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #patch,
          [path],
          {
            #data: data,
            #queryParameters: queryParameters,
            #options: options,
            #cancelToken: cancelToken,
            #onSendProgress: onSendProgress,
            #onReceiveProgress: onReceiveProgress,
          },
        ),
        returnValue: _i4.Future<_i8.Response<T>>.value(_FakeResponse_10<T>(
          this,
          Invocation.method(
            #patch,
            [path],
            {
              #data: data,
              #queryParameters: queryParameters,
              #options: options,
              #cancelToken: cancelToken,
              #onSendProgress: onSendProgress,
              #onReceiveProgress: onReceiveProgress,
            },
          ),
        )),
        returnValueForMissingStub:
            _i4.Future<_i8.Response<T>>.value(_FakeResponse_10<T>(
          this,
          Invocation.method(
            #patch,
            [path],
            {
              #data: data,
              #queryParameters: queryParameters,
              #options: options,
              #cancelToken: cancelToken,
              #onSendProgress: onSendProgress,
              #onReceiveProgress: onReceiveProgress,
            },
          ),
        )),
      ) as _i4.Future<_i8.Response<T>>);

  @override
  _i4.Future<_i8.Response<T>> patchUri<T>(
    Uri? uri, {
    Object? data,
    _i8.Options? options,
    _i8.CancelToken? cancelToken,
    _i8.ProgressCallback? onSendProgress,
    _i8.ProgressCallback? onReceiveProgress,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #patchUri,
          [uri],
          {
            #data: data,
            #options: options,
            #cancelToken: cancelToken,
            #onSendProgress: onSendProgress,
            #onReceiveProgress: onReceiveProgress,
          },
        ),
        returnValue: _i4.Future<_i8.Response<T>>.value(_FakeResponse_10<T>(
          this,
          Invocation.method(
            #patchUri,
            [uri],
            {
              #data: data,
              #options: options,
              #cancelToken: cancelToken,
              #onSendProgress: onSendProgress,
              #onReceiveProgress: onReceiveProgress,
            },
          ),
        )),
        returnValueForMissingStub:
            _i4.Future<_i8.Response<T>>.value(_FakeResponse_10<T>(
          this,
          Invocation.method(
            #patchUri,
            [uri],
            {
              #data: data,
              #options: options,
              #cancelToken: cancelToken,
              #onSendProgress: onSendProgress,
              #onReceiveProgress: onReceiveProgress,
            },
          ),
        )),
      ) as _i4.Future<_i8.Response<T>>);

  @override
  _i4.Future<_i8.Response<T>> delete<T>(
    String? path, {
    Object? data,
    Map<String, dynamic>? queryParameters,
    _i8.Options? options,
    _i8.CancelToken? cancelToken,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #delete,
          [path],
          {
            #data: data,
            #queryParameters: queryParameters,
            #options: options,
            #cancelToken: cancelToken,
          },
        ),
        returnValue: _i4.Future<_i8.Response<T>>.value(_FakeResponse_10<T>(
          this,
          Invocation.method(
            #delete,
            [path],
            {
              #data: data,
              #queryParameters: queryParameters,
              #options: options,
              #cancelToken: cancelToken,
            },
          ),
        )),
        returnValueForMissingStub:
            _i4.Future<_i8.Response<T>>.value(_FakeResponse_10<T>(
          this,
          Invocation.method(
            #delete,
            [path],
            {
              #data: data,
              #queryParameters: queryParameters,
              #options: options,
              #cancelToken: cancelToken,
            },
          ),
        )),
      ) as _i4.Future<_i8.Response<T>>);

  @override
  _i4.Future<_i8.Response<T>> deleteUri<T>(
    Uri? uri, {
    Object? data,
    _i8.Options? options,
    _i8.CancelToken? cancelToken,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #deleteUri,
          [uri],
          {
            #data: data,
            #options: options,
            #cancelToken: cancelToken,
          },
        ),
        returnValue: _i4.Future<_i8.Response<T>>.value(_FakeResponse_10<T>(
          this,
          Invocation.method(
            #deleteUri,
            [uri],
            {
              #data: data,
              #options: options,
              #cancelToken: cancelToken,
            },
          ),
        )),
        returnValueForMissingStub:
            _i4.Future<_i8.Response<T>>.value(_FakeResponse_10<T>(
          this,
          Invocation.method(
            #deleteUri,
            [uri],
            {
              #data: data,
              #options: options,
              #cancelToken: cancelToken,
            },
          ),
        )),
      ) as _i4.Future<_i8.Response<T>>);

  @override
  _i4.Future<_i8.Response<dynamic>> download(
    String? urlPath,
    dynamic savePath, {
    _i8.ProgressCallback? onReceiveProgress,
    Map<String, dynamic>? queryParameters,
    _i8.CancelToken? cancelToken,
    bool? deleteOnError = true,
    String? lengthHeader = r'content-length',
    Object? data,
    _i8.Options? options,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #download,
          [
            urlPath,
            savePath,
          ],
          {
            #onReceiveProgress: onReceiveProgress,
            #queryParameters: queryParameters,
            #cancelToken: cancelToken,
            #deleteOnError: deleteOnError,
            #lengthHeader: lengthHeader,
            #data: data,
            #options: options,
          },
        ),
        returnValue:
            _i4.Future<_i8.Response<dynamic>>.value(_FakeResponse_10<dynamic>(
          this,
          Invocation.method(
            #download,
            [
              urlPath,
              savePath,
            ],
            {
              #onReceiveProgress: onReceiveProgress,
              #queryParameters: queryParameters,
              #cancelToken: cancelToken,
              #deleteOnError: deleteOnError,
              #lengthHeader: lengthHeader,
              #data: data,
              #options: options,
            },
          ),
        )),
        returnValueForMissingStub:
            _i4.Future<_i8.Response<dynamic>>.value(_FakeResponse_10<dynamic>(
          this,
          Invocation.method(
            #download,
            [
              urlPath,
              savePath,
            ],
            {
              #onReceiveProgress: onReceiveProgress,
              #queryParameters: queryParameters,
              #cancelToken: cancelToken,
              #deleteOnError: deleteOnError,
              #lengthHeader: lengthHeader,
              #data: data,
              #options: options,
            },
          ),
        )),
      ) as _i4.Future<_i8.Response<dynamic>>);

  @override
  _i4.Future<_i8.Response<dynamic>> downloadUri(
    Uri? uri,
    dynamic savePath, {
    _i8.ProgressCallback? onReceiveProgress,
    _i8.CancelToken? cancelToken,
    bool? deleteOnError = true,
    String? lengthHeader = r'content-length',
    Object? data,
    _i8.Options? options,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #downloadUri,
          [
            uri,
            savePath,
          ],
          {
            #onReceiveProgress: onReceiveProgress,
            #cancelToken: cancelToken,
            #deleteOnError: deleteOnError,
            #lengthHeader: lengthHeader,
            #data: data,
            #options: options,
          },
        ),
        returnValue:
            _i4.Future<_i8.Response<dynamic>>.value(_FakeResponse_10<dynamic>(
          this,
          Invocation.method(
            #downloadUri,
            [
              uri,
              savePath,
            ],
            {
              #onReceiveProgress: onReceiveProgress,
              #cancelToken: cancelToken,
              #deleteOnError: deleteOnError,
              #lengthHeader: lengthHeader,
              #data: data,
              #options: options,
            },
          ),
        )),
        returnValueForMissingStub:
            _i4.Future<_i8.Response<dynamic>>.value(_FakeResponse_10<dynamic>(
          this,
          Invocation.method(
            #downloadUri,
            [
              uri,
              savePath,
            ],
            {
              #onReceiveProgress: onReceiveProgress,
              #cancelToken: cancelToken,
              #deleteOnError: deleteOnError,
              #lengthHeader: lengthHeader,
              #data: data,
              #options: options,
            },
          ),
        )),
      ) as _i4.Future<_i8.Response<dynamic>>);

  @override
  _i4.Future<_i8.Response<T>> request<T>(
    String? url, {
    Object? data,
    Map<String, dynamic>? queryParameters,
    _i8.CancelToken? cancelToken,
    _i8.Options? options,
    _i8.ProgressCallback? onSendProgress,
    _i8.ProgressCallback? onReceiveProgress,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #request,
          [url],
          {
            #data: data,
            #queryParameters: queryParameters,
            #cancelToken: cancelToken,
            #options: options,
            #onSendProgress: onSendProgress,
            #onReceiveProgress: onReceiveProgress,
          },
        ),
        returnValue: _i4.Future<_i8.Response<T>>.value(_FakeResponse_10<T>(
          this,
          Invocation.method(
            #request,
            [url],
            {
              #data: data,
              #queryParameters: queryParameters,
              #cancelToken: cancelToken,
              #options: options,
              #onSendProgress: onSendProgress,
              #onReceiveProgress: onReceiveProgress,
            },
          ),
        )),
        returnValueForMissingStub:
            _i4.Future<_i8.Response<T>>.value(_FakeResponse_10<T>(
          this,
          Invocation.method(
            #request,
            [url],
            {
              #data: data,
              #queryParameters: queryParameters,
              #cancelToken: cancelToken,
              #options: options,
              #onSendProgress: onSendProgress,
              #onReceiveProgress: onReceiveProgress,
            },
          ),
        )),
      ) as _i4.Future<_i8.Response<T>>);

  @override
  _i4.Future<_i8.Response<T>> requestUri<T>(
    Uri? uri, {
    Object? data,
    _i8.CancelToken? cancelToken,
    _i8.Options? options,
    _i8.ProgressCallback? onSendProgress,
    _i8.ProgressCallback? onReceiveProgress,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #requestUri,
          [uri],
          {
            #data: data,
            #cancelToken: cancelToken,
            #options: options,
            #onSendProgress: onSendProgress,
            #onReceiveProgress: onReceiveProgress,
          },
        ),
        returnValue: _i4.Future<_i8.Response<T>>.value(_FakeResponse_10<T>(
          this,
          Invocation.method(
            #requestUri,
            [uri],
            {
              #data: data,
              #cancelToken: cancelToken,
              #options: options,
              #onSendProgress: onSendProgress,
              #onReceiveProgress: onReceiveProgress,
            },
          ),
        )),
        returnValueForMissingStub:
            _i4.Future<_i8.Response<T>>.value(_FakeResponse_10<T>(
          this,
          Invocation.method(
            #requestUri,
            [uri],
            {
              #data: data,
              #cancelToken: cancelToken,
              #options: options,
              #onSendProgress: onSendProgress,
              #onReceiveProgress: onReceiveProgress,
            },
          ),
        )),
      ) as _i4.Future<_i8.Response<T>>);

  @override
  _i4.Future<_i8.Response<T>> fetch<T>(_i8.RequestOptions? requestOptions) =>
      (super.noSuchMethod(
        Invocation.method(
          #fetch,
          [requestOptions],
        ),
        returnValue: _i4.Future<_i8.Response<T>>.value(_FakeResponse_10<T>(
          this,
          Invocation.method(
            #fetch,
            [requestOptions],
          ),
        )),
        returnValueForMissingStub:
            _i4.Future<_i8.Response<T>>.value(_FakeResponse_10<T>(
          this,
          Invocation.method(
            #fetch,
            [requestOptions],
          ),
        )),
      ) as _i4.Future<_i8.Response<T>>);
}

/// A class which mocks [RemoteArticlesBloc].
///
/// See the documentation for Mockito's code generation for more information.
class MockRemoteArticlesBloc extends _i1.Mock
    implements _i22.RemoteArticlesBloc {
  @override
  _i9.RemoteArticlesState get state => (super.noSuchMethod(
        Invocation.getter(#state),
        returnValue: _FakeRemoteArticlesState_11(
          this,
          Invocation.getter(#state),
        ),
        returnValueForMissingStub: _FakeRemoteArticlesState_11(
          this,
          Invocation.getter(#state),
        ),
      ) as _i9.RemoteArticlesState);

  @override
  _i4.Stream<_i9.RemoteArticlesState> get stream => (super.noSuchMethod(
        Invocation.getter(#stream),
        returnValue: _i4.Stream<_i9.RemoteArticlesState>.empty(),
        returnValueForMissingStub: _i4.Stream<_i9.RemoteArticlesState>.empty(),
      ) as _i4.Stream<_i9.RemoteArticlesState>);

  @override
  bool get isClosed => (super.noSuchMethod(
        Invocation.getter(#isClosed),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);

  @override
  void onGetArticles(
    _i23.GetArticles? event,
    _i21.Emitter<_i9.RemoteArticlesState>? emit,
  ) =>
      super.noSuchMethod(
        Invocation.method(
          #onGetArticles,
          [
            event,
            emit,
          ],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void add(_i23.RemoteArticlesEvent? event) => super.noSuchMethod(
        Invocation.method(
          #add,
          [event],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void onEvent(_i23.RemoteArticlesEvent? event) => super.noSuchMethod(
        Invocation.method(
          #onEvent,
          [event],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void emit(_i9.RemoteArticlesState? state) => super.noSuchMethod(
        Invocation.method(
          #emit,
          [state],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void on<E extends _i23.RemoteArticlesEvent>(
    _i21.EventHandler<E, _i9.RemoteArticlesState>? handler, {
    _i21.EventTransformer<E>? transformer,
  }) =>
      super.noSuchMethod(
        Invocation.method(
          #on,
          [handler],
          {#transformer: transformer},
        ),
        returnValueForMissingStub: null,
      );

  @override
  void onTransition(
          _i21.Transition<_i23.RemoteArticlesEvent, _i9.RemoteArticlesState>?
              transition) =>
      super.noSuchMethod(
        Invocation.method(
          #onTransition,
          [transition],
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i4.Future<void> close() => (super.noSuchMethod(
        Invocation.method(
          #close,
          [],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  void onChange(_i21.Change<_i9.RemoteArticlesState>? change) =>
      super.noSuchMethod(
        Invocation.method(
          #onChange,
          [change],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void addError(
    Object? error, [
    StackTrace? stackTrace,
  ]) =>
      super.noSuchMethod(
        Invocation.method(
          #addError,
          [
            error,
            stackTrace,
          ],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void onError(
    Object? error,
    StackTrace? stackTrace,
  ) =>
      super.noSuchMethod(
        Invocation.method(
          #onError,
          [
            error,
            stackTrace,
          ],
        ),
        returnValueForMissingStub: null,
      );
}
